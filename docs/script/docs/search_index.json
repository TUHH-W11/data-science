[
["welcome.html", "DATA SCIENCE Course script Module from our certificate program Welcome", " DATA SCIENCE Course script Module from our certificate program Joschka Schwarz 2020-05-11 Welcome This script are the class notes used in the NIT Data Science course. It will teach you how to program in R, with hands-on examples for business analytics. It is written for non-programmers to provide a friendly introduction to the R language. You’ll learn how to load data, assemble and disassemble data objects, navigate R’s environment system, write your own functions, and use all of R’s programming tools. "],
["preface.html", "Preface", " Preface This book will teach you how to program in R. You’ll go from loading data to writing your own functions. But this is not a typical introduction to R. I want to help you become a data scientist, as well as a computer scientist, so this book will focus on the programming skills that are most related to data science and business analytics. The chapters in the book are arranged according to seven practical projects. When you work with data, you will need to store, retrieve, and manipulate large sets of values without introducing errors. As you work through the book, I will teach you not just how to program with R, but how to use the programming skills to support your work as a data scientist. As you complete the projects, you will become an expert at the skills you need to work with data as a data scientist. You will learn how to store data in your computer’s memory, how to access data that is already there, and how to transform data values in memory when necessary. You will also learn how to write your own programs in R that you can use to analyze data and run simulations. There is no prerequisite knowledge needed in R Programming, Data Science, or Machine Learning. I have written it for beginning programmers. I do not talk about the theory of computer science. Nor do I get into advanced details such as the workings of lazy evaluation. These things are interesting if you think of computer science at the theoretical level, but they are a distraction when you first learn to program. Instead, I teach you how to program in R with concrete examples. These examples are short, easy to understand, and cover everything you need to know. The examples have a second advantage, as well: they provide immediate practice. Learning to program is like learning to speak another language—you progress faster when you practice. In fact, learning to program is learning to speak another language. You will get the best results if you follow along with the examples in the book and experiment whenever an idea strikes you. Visualizing and modeling data are complicated skills that require a scientist’s full attention. It takes expertise, judgement, and focus to extract reliable insights from a data set. I would not recommend that any data scientist distract herself with computer programming until she feels comfortable with the basic theory and practice of her craft. If you would like to learn the craft of data science, I recommend the book R for Data Science, written by Hadley Wickham. "],
["introduction-to-r.html", "0.1 Introduction to R", " 0.1 Introduction to R 0.1.1 What is R? R is a powerful statistical environment and programming language for the analysis and visualization of data … 0.1.2 Why using R? Complete statistical environment and programming language Efficient functions and data structures for data analysis Powerful graphics Access to fast growing number of analysis packages Technical advantages: free, open-source, available for all OSs It’s easy to get distracted by Tableau and PowerBI’s visuals, but when it comes to making business decisions, your organization needs to be able to take actions. This is where R Shiny is lightyears ahead of the other tools - R Shiny is a powerful ecosystem for business + data science + apps. However, learning to program should be on every data scientist’s to-do list. Knowing how to program will make you a more flexible analyst and augment your mastery of data science in every way. My favorite metaphor for describing this was introduced by Greg Snow on the R help mailing list in May 2006. Using functions in R is like riding a bus. Writing functions in R is like driving a car. Busses are very easy to use, you just need to know which bus to get on, where to get on, and where to get off (and you need to pay your fare). Cars, on the other hand, require much more work: you need to have some type of map or directions (even if the map is in your head), you need to put gas in every now and then, you need to know the rules of the road (have some type of drivers license). The big advantage of the car is that it can take you a bunch of places that the bus does not go and it is quicker for some trips that would require transferring between busses. Using this analogy, programs like SPSS are busses, easy to use for the standard things, but very frustrating if you want to do something that is not already preprogrammed. R is a 4-wheel drive SUV (though environmentally friendly) with a bike on the back, a kayak on top, good walking and running shoes in the passenger seat, and mountain climbing and spelunking gear in the back. R can take you anywhere you want to go if you take time to learn how to use the equipment, but that is going to take longer than learning where the bus stops are in SPSS. - Greg Snow Greg compares R to SPSS, but he assumes that you use the full powers of R; in other words, that you learn how to program in R. If you only use functions that preexist in R, you are using R like SPSS: it is a bus that can only take you to certain places. This flexibility matters to data scientists. The exact details of a method or simulation will change from problem to problem. If you cannot build a method tailored to your situation, you may find yourself tempted to make unrealistic assumptions just so you can use an ill-suited method that already exists. This book will help you make the leap from bus to car. further stuff R does not involve lots of pointing and clicking, and that’s a good thing The learning curve might be steeper than with other software, but with R, the results of your analysis do not rely on remembering a succession of pointing and clicking, but instead on a series of written commands, and that’s a good thing! So, if you want to redo your analysis because you collected more data, you don’t have to remember which button you clicked in which order to obtain your results; you just have to run your script again. Working with scripts makes the steps you used in your analysis clear, and the code you write can be inspected by someone else who can give you feedback and spot mistakes. Working with scripts forces you to have a deeper understanding of what you are doing, and facilitates your learning and comprehension of the methods you use. R code is great for reproducibility Reproducibility is when someone else (including your future self) can obtain the same results from the same dataset when using the same analysis. R integrates with other tools to generate manuscripts from your code. If you collect more data, or fix a mistake in your dataset, the figures and the statistical tests in your manuscript are updated automatically. An increasing number of journals and funding agencies expect analyses to be reproducible, so knowing R will give you an edge with these requirements. R is interdisciplinary and extensible With 10,000+ packages that can be installed to extend its capabilities, R provides a framework that allows you to combine statistical approaches from many scientific disciplines to best suit the analytical framework you need to analyze your data. For instance, R has packages for image analysis, GIS, time series, population genetics, and a lot more. R works on data of all shapes and sizes The skills you learn with R scale easily with the size of your dataset. Whether your dataset has hundreds or millions of lines, it won’t make much difference to you. R is designed for data analysis. It comes with special data structures and data types that make handling of missing data and statistical factors convenient. R can connect to spreadsheets, databases, and many other data formats, on your computer or on the web. R produces high-quality graphics The plotting functionalities in R are endless, and allow you to adjust any aspect of your graph to convey most effectively the message from your data. R has a large and welcoming community Thousands of people use R daily. Many of them are willing to help you through mailing lists and websites such as Stack Overflow, or on the RStudio community. Not only is R free, but it is also open-source and cross-platform Anyone can inspect the source code to see how R works. Because of this transparency, there is less chance for mistakes, and if you (or someone else) find some, you can report and fix bugs. bonus Isn’t R a language? You may hear me speak of R in the third person. For example, I might say, “Tell R to do this” or “Tell R to do that”, but of course R can’t do anything; it is just a language. This way of speaking is shorthand for saying, “Tell your computer to do this by writing a command in the R language at the command line of your RStudio console.” Your computer, and not R, does the actual work. Is this shorthand confusing and slightly lazy to use? Yes. Do a lot of people use it? Everyone I know–probably because it is so convenient. When do we compile? In some languages, like C, Java, and FORTRAN, you have to compile your human-readable code into machine-readable code (often 1s and 0s) before you can run it. If you’ve programmed in such a language before, you may wonder whether you have to compile your R code before you can use it. The answer is no. R is a dynamic programming language, which means R automatically interprets your code as you run it. "],
["acknowledgments.html", "0.2 Acknowledgments", " 0.2 Acknowledgments Hadley Wickham … Hands on R Other sources "],
["getting-started.html", "Chapter 1 R &amp; RStudio", " Chapter 1 R &amp; RStudio This chapter provides a broad overview of the R language that will get you programming right away. The first project will be creating a decision tool used in cost accounting. This project will make it easier to study these things by teaching you the basics of R. The term “R” is used to refer to both the programming language and the software that interprets the scripts written using it. Your first mission is simple: assemble R code that will calculate the ideal quantity of inventory to order for a given product. In this project, you will learn how to: Use the R and RStudio interfaces Run R commands Create R objects Write your own R functions and scripts Don’t worry if you’ve never programmed before and it seems like we cover a lot of ground fast. The chapter will teach you everything you need to know and gives you a concise overview of the R language. You will return to many of the concepts we meet here in the next projects, where you will examine the concepts in depth. Before you can ask your computer to save some numbers, you’ll need to know how to talk to it. RStudio gives you a way to talk to your computer. R gives you a language to speak in. To start you will need to have both R and RStudio installed on your computer before you can use them. R and RStudio are separate downloads and installations. Both are free (under the Affero General Public License (AGPL) v3) and easy to download. R is the underlying statistical computing environment, but using R alone is no fun. RStudio is a graphical integrated development environment (IDE) that makes using R much easier and more interactive. You need to install R before you install RStudio. On the following sites you’ll find information about how to install the language R and the IDE RStudio. You can choose between an interactive and a manual tutorial. "],
["installing-r-rstudio-ide.html", "1.1 Installing R &amp; RStudio IDE", " 1.1 Installing R &amp; RStudio IDE 1.1.1 Interactively Go to the following link and follow the instructions to install R and the IDE RStudio Interactive Shinyapp Install R &amp; RStudio IDE 1.1.2 Manually Download and install R, a free software environment for statistical computing and graphics from CRAN, the Comprehensive R Archive Network. Video instructions to install R (Download link below) Download https://cloud.r-project.org Steps Click “Download R for Mac/Windows” Download the appropriate file: Windows users click Base, and download the installer for the latest R version Mac users select the file R-3.X.X.pkg that aligns with your OS version Follow the instructions of the installer. Install RStudio’s IDE (stands for integrated development environment), a powerful user interface for R. Video instructions to install RStudio (Download link below) Download https://rstudio.com/products/rstudio/download/ Steps Select the install file for your OS. Follow the instructions of the installer. "],
["understanding-the-rstudio-ide-working-with-rstudio.html", "1.2 Understanding the RStudio IDE &amp; Working with RStudio", " 1.2 Understanding the RStudio IDE &amp; Working with RStudio Let’s start by learning about RStudio, the Integrated Development Environment (IDE) for working with R. We will use RStudio IDE to write code, navigate the files on our computer, inspect the variables we are going to create, and visualize the plots we will generate. RStudio can also be used for other things (e.g., version control, developing packages, writing Shiny apps) that we will not cover during this class. One of the advantages of using RStudio is that all the information you need to write code is available in a single window. Additionally, with many shortcuts, autocompletion, and highlighting for the major file types you use while developing in R, RStudio will make typing easier and less error-prone. To get started, open RStudio just as you would open any other application on your computer. When you do, a window should appear in your screen like the one shown in Figure 1.1. RStudio is divided into 4 Panes. Infobox The placement of these panes and their content can be customized Tools -&gt; Global Options -&gt; Pane Layout. To change the appearence of RStudio go to Tools –&gt; Global options –&gt; appearences. At first startup you will not see an open script as seen in the green frame. You can create one by clicking first on (new file) and then on (new R script) in the upper left corner. Alternatively you can use the shortcut Shift+⌘+N on macOS or Shift+Ctrl+N on Windows &amp; Linux. FIGURE 1.1: RStudio Integrated Development Environment (IDE). The basis of programming is that we write down instructions for the computer to follow, and then we tell the computer to follow those instructions. We write, or code, instructions in R because it is a common language that both the computer and we can understand. We call the instructions commands and we tell the computer to follow the instructions by executing (also called running) those commands. There are two main ways of interacting with R: by using the console or by using script files. Console The console appears in the bottom left panel. Simply put, the Console is where you type commands and visually see the outputs. This is the place where commands written in the R language can be typed and executed immediately by hitting Enter. The code you type is called a command, because it will command your computer to do something for you. The line you type it into is called the command line. This pane does not save your code. Those commands will be forgotten when you close the session. It only displays the output and the history of commands that have been executed. When you type a command at the prompt and hit Enter, your computer executes the command and shows you the results. If R is ready to accept a new command, RStudio displays a fresh &gt; prompt for your next command. For example, if you type 10 * 10 and hit Enter, RStudio will display: &gt; 10 * 10 [1] 100 &gt; You’ll notice that a [1] appears next to your result. R is just letting you know that this line begins with the first value in your result. Some commands return more than one value, and their results may fill up multiple lines. For example, the command 1:100 returns 100 integer (numbers that have no no digits after the decimal point). It creates a sequence of integers from 1 to 100. Notice that new bracketed numbers appear at the start of the second and third lines of output. These numbers just mean that the second line begins with the 30th value in the result, and the third line begins with the 59th value and so on. You can mostly ignore the numbers that appear in brackets: [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 [30] 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 [59] 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 [88] 88 89 90 91 92 93 94 95 96 97 98 99 100 Infobox The colon operator (:) returns every integer between two integers. It is an easy way to create a sequence of numbers. If you type an incomplete command and press Enter, R will display a + prompt, which means R is waiting for you to type the rest of your command. This is because you have not closed a parenthesis or quotation, i.e. you do not have the same number of left-parentheses as right-parentheses, or the same number of opening and closing quotation marks. Either finish the command or hit Esc to start over: &gt; 99 + + + 1 [1] 100 If you type a command that R doesn’t recognize, R will return an error message. If you ever see an error message, don’t panic. R is just telling you that your computer couldn’t understand or do what you asked it to do. You can then try a different command at the next prompt: &gt; 100 % 2 Error: unexpected input in &quot;100 % 2&quot; &gt; Once you get the hang of the command line, you can easily do anything in R that you would do with a calculator. For example, you could do some basic arithmetic: 2 * 3 ## 6 4 - 1 ## 3 6 / (4 - 1) ## 2 Did you notice something different about this code? I’ve left out the &gt;’s and [1]’s. This will make the code easier to copy and paste if you want to put it in your own console. R treats the hashtag character, #, in a special way; R will not run anything that follows a hashtag on a line. This makes hashtags very useful for adding comments and annotations to your code. Humans will be able to read the comments, but your computer will pass over them. The hashtag is known as the commenting symbol in R. For the remainder of the book, I’ll use hashtags to display the output of R code. I’ll use a single hashtag to add my own comments and a double hashtag, ##, to display the results of code. I’ll avoid showing &gt; and [1] unless I want you to look at them. Exercise That’s the basic interface for executing R code in RStudio. Think you have it? If so, try doing these simple tasks to calculate the economic order quantity with the given formula (Hint: Use sqrt(x) to calculate the square root). \\[Q = \\sqrt{\\frac{2DK}{h}}\\] Calulate the Q where: \\(D = 1000\\), \\(K = 5\\), \\(h = 0.25\\) Solution 2 * 1000 * 5 ## 10000 10000 / 0.25 ## 40000 sqrt(40000) ## 200 Throughout the book, I’ll put exercises in chunks, like the one above. I’ll follow each exercise with a model answer, like the one above. Script files/ Source Because we want our code and workflow to be reproducible and generally we will want to write programs longer than a few lines, it is better to type the commands we want in the script editor, and save the script. In the source tab you can create a draft of your code as you go by using an R script. An R script is just a plain text file (saved with a .R or .r extension) that you save R code in. I strongly encourage you to write and edit all of your R code in a script before you run it in the console. This habit creates a reproducible record of your work. When you’re finished for the day, you can save your script and then use it to rerun your entire analysis the next day. Scripts are also very handy for editing and proofreading your code, and they make a nice copy of your work to share with others. This way, there is a complete record of what we did, and anyone (including our future selves!) can easily replicate the results on their computer. Moreover, the source editor in RStudio has the advantage of providing syntax highlighting, code completion, and smart indentation. You can see the different colours for numbers and there is also highlighting to help you count brackets (click your cursor next to a bracket and push the right arrow and you will see its partner bracket highlighted).To save a script, click or use the shortcut Cmd+S on macOS or Ctrl+S on Windows &amp; Linux. RStudio allows you to execute commands directly from the script editor by using the Ctrl + Enter shortcut (on Macs, Cmd + Return will work, too). The command on the current line in the script (indicated by the cursor) or all of the commands in the currently selected text will be sent to the console and executed when you press the shortcut. Exercise Write your calculations for the EOQ in the script editor and … … execute a single line (Run icon or Cmd+ Return). Note that the cursor can be anywhere on the line and one does not need to highlight anything — do this for the code on line 2 … execute multiple lines (Highlight lines with the cursor, then Run icon or Cmd+ Return … execute the whole script (Source icon or Cmd + Shift + S) Note that running code via source differs in a few respects from entering it at the R command line. Sourcing a file does not print command outputs. To see your output click the arrow next to the source icon and click Source with Echo or use Cmd + Shift + Return. Assignment operator You can get now output from R simply by typing math in the console or by running a script. You generated different numbers for you to see, but it didn’t save that values anywhere in your computer’s memory. If you want to use those numbers again, you’ll have to ask your computer to save them somewhere. You can do that by creating R objects. R lets you save data by storing it inside an R object. What is an object? Just a name that you can use to call up stored data. For example, you can save data into an object like a or b. Wherever R encounters the object, it will replace it with the data saved inside. To create an object, we need to give it a name followed by the assignment operator &lt;-, and the value we want to give it next to it. Typing Cmd + - will write &lt;- in a single keystroke. R ignores spaces and line breaks and executes one complete expression at a time. But it makes the code easier for you and me to read. EOQ &lt;- 200 Infobox For historical reasons, you can also use = for assignments, but not in every context. Because of the slight differences in syntax, it is good practice to always use &lt;- for assignments. To see what is stored in an object, just type the object’s name by itself. EOQ &lt;- 200 EOQ ## 200 You can name an object in R almost anything you want such as x, current_temperature, or subject_id, but there are a few rules. First, a name cannot start with a number (2x is not valid, but x2 is). Second, a name cannot use some special symbols, like ^, !, $, @, +, -, /, or *. You want your object names to be explicit and not too long. There are some names that cannot be used because they are the names of fundamental functions in R (e.g., if, else, for, see here for a complete list). In general, even if it’s allowed, it’s best to not use other function names (e.g., c, T, mean, data, df, weights). It’s also best to avoid dots (.) within an object name as in my.dataset. There are many functions in R with dots in their names for historical reasons, but because dots have a special meaning in R (for methods) and other programming languages, it’s best to avoid them. It is also recommended to use nouns for object names, and verbs for function names. It’s important to be consistent in the styling of your code (where you put spaces, how you name objects, etc.). Using a consistent coding style makes your code clearer to read for your future self and your collaborators. Another important question here is, is R case sensitive? Is A the same as a? Figure out a way to check for yourself. Environment/ History When you create an object (i.e., dataframes, arrays, values and functions), the object will appear in the index tab Environment. If an object with the same name already exists in the active environment, R will overwrite it without asking you for permission. This pane will show you all of the objects you’ve created since opening RStudio. You can see the values for objects with a single value and for those that are longer R will tell you their class. When you have data in your environment that have two dimensions (rows and columns) you may click on them and they will appear in the Source Editor pane like a spreadsheet. Also in this pane is the History tab, where you can see all of the code executed for the session. If you double-click a line or highlight a block of lines and then double-click those, you can send it to the Console (i.e., run them). The history will not be saved if we did not choose to save the environment after a session. The Build Tab will be useful later when you create your own website to hand in your code. We will come back to this shortly. Exercise Now that we know how to put values into memory, we can do arithmetic with it and calculate EOQ again. Assign all values to R objects. Replicate the formula with those ojects and assign this formula to the variable Q. D &lt;- 1000 K &lt;- 5 h &lt;- 0.25 Q &lt;- sqrt(2*D*K/h) Q ## 200 Misc. Displays Finally, the bottom right panel is the miscellaneous panel containing five separate tabs. The Files tab has a navigable file manager, just like the file system on your operating system. It shows all the files and folders in the default workspace. The Plot tab is where graphics you create will appear. Here we can zoom, export, configure and inspect graphs/figures. The Packages tab shows you the packages that are installed and those that can be installed (more on this later). The Help tab allows you to search the R documentation for help and is where the help appears when you ask for it from the Console. Getting set up It is good practice to keep a set of related data, analyses, and text self-contained in a single folder, called the working directory. It is the place from where R will be looking for and saving the files. All of the scripts within this folder can then use relative paths to files that indicate where inside the project a file is located (as opposed to absolute paths, which point to where a file is on a specific computer). Working this way makes it a lot easier to move your project around on your computer and share it with others without worrying about whether or not the underlying scripts will still work. RStudio provides a helpful set of tools to do this through its Projects interface, which not only creates a working directory for you, but also remembers its location (allowing you to quickly navigate to it) and optionally preserves custom settings and open files to make it easier to resume work after a break. Using RStudio projects makes this easy and ensures that your working directory is set properly. You can see your current working directory in the path given above the console or you can just run the command getwd(). If for some reason your working directory is not what it should be, you can change it in the RStudio interface by navigating in the file browser where your working directory should be, and clicking on the blue gear icon More, and select Set As Working Directory. Alternatively you can use setwd(&quot;/path/to/working/directory&quot;) to reset your working directory. However, your scripts should not include this line because it will fail on someone else’s computer. Using a consistent folder structure across your projects will help keep things organized, and will also make it easy to find/file things in the future. This can be especially helpful when you have multiple projects. In general, you may create directories (folders) for scripts, data, and documents. data_raw/ &amp; data/ Use these folders to store raw data and intermediate datasets you may create for the need of a particular analysis. For the sake of transparency and provenance, you should always keep a copy of your raw data accessible and do as much of your data cleanup and preprocessing programmatically (i.e., with scripts, rather than manually) as possible. Separating raw data from processed data is also a good idea. For example, you could have files data_raw/tree_survey.plot1.txt and ...plot2.txt kept separate from a data/tree.survey.csv file generated by the scripts/01.preprocess.tree_survey.R script. documents/ This would be a place to keep outlines, drafts and other text. scripts/ This would be the location to keep your R scripts for different analyses or plotting, and potentially a separate folder for your functions (more on that later). Additional (sub)directories depending on your project needs. Exercise Getting set up: Create a new project, organize your working directory and save your first script: Download the zip file, extract the date and and choose a convenient location for it. (e.g. WIN: C:/Dropbox/data-science/ macOS: ~/Dropbox/data-science) Download ds_project.zip In RStudio under the File menu, click on New Project (or click ) and then choose Existing Directory. This will be your working directory (e.g., ~/data-science). Locate the downloaded folder and then click Create Project. Your working directory should now look like this: FIGURE 1.2: Project structure example in RStudio. For this first project, we will just need a 00_getting_started/ folder to store our first script. We will use the other folders for when we learn how to import data such as CSV files, and for the figures that we will save. Under the Files tab on the right of the screen, click on New Folder and create a folder named 00_getting_started within your newly created working directory. (Alternatively, type dir.create(&quot;00_getting_started&quot;) at your R console.) Open your previously saved R-script and save it in this directory. Infobox RStudio’s default preferences generally work well, but saving a workspace to .RData can be cumbersome, especially if you are working with larger datasets. To turn that off, go to Tools –&gt; ‘Global Options’ and select the ‘Never’ option for ‘Save workspace to .RData’ on exit.’ This also helps to save your entire work in your code instead of saving it into variables. Getting help with Help Pages There are over 1,000 functions at the core of R, and new R functions are created all of the time. This can be a lot of material to memorize and learn! Luckily, each R function comes with its own help page, which you can access by typing the function’s name after a question mark. For example, each of these commands will open a help page. Look for the pages to appear in the Help tab of RStudio’s bottom-right pane: ?sqrt ?log10 ?sample Help pages contain useful information about what each function does. These help pages also serve as code documentation, so reading them can be bittersweet. They often seem to be written for people who already understand the function and do not need help. Don’t let this bother you—you can gain a lot from a help page by scanning it for information that makes sense and glossing over the rest. This technique will inevitably bring you to the most helpful part of each help page: the bottom. Here, almost every help page includes some example code that puts the function in action. Running this code is a great way to learn by example. Parts of a Help Page Each help page is divided into sections. Which sections appear can vary from help page to help page, but you can usually expect to find these useful topics: Description - A short summary of what the function does. Usage - An example of how you would type the function. Each argument of the function will appear in the order R expects you to supply it (if you don’t use argument names). Arguments - A list of each argument the function takes, what type of information R expects you to supply for the argument, and what the function will do with the information. Details - A more in-depth description of the function and how it operates. The details section also gives the function author a chance to alert you to anything you might want to know when using the function. Value - A description of what the function returns when you run it. See Also - A short list of related R functions. Examples - Example code that uses the function and is guaranteed to work. The examples section of a help page usually demonstrates a couple different ways to use a function. This helps give you an idea of what the function is capable of. If you’d like to look up the help page for a function but have forgotten the function’s name, you can search by keyword. To do this, type two question marks followed by a keyword in R’s command line. R will pull up a list of links to help pages related to the keyword. You can think of this as the help page for the help page: ??log Let’s take a stroll through sample’s help page. Remember: we’re searching for anything that could help you change the probabilities involved in the sampling process. I’m not going to reproduce the whole help page here (just the juiciest parts), so you should follow along on your computer. First, open the help page. It will appear in the same pane in RStudio as your plots did (but in the Help tab, not the Plots tab): ?sample What do you see? Starting from the top: Random Samples and Permutations Description sample takes a sample of the specified size from the elements of x using either with or without replacement. Inside RStudio: You can just type ?function_name or help(function_name) into the console. # provides details for specific function help(sqrt) # provides same information as help(functionname) ?sqrt # provides examples for said function example(sqrt) Infobox Explain the ? in front of functions (contr + enter). Use ?function_name to get the help documentation on a function. Usage and arguments section. External to RStudio: R also comes with a super active community of users that you can turn to for help. Stack Overflow, a website that allows programmers to answer questions and users to rank answers based on helpfulness, is the best place to find an answer to your question. You can submit your own question or search through Stack Overflow’s previously answered questions related to R, because there’s a great chance that your question has already been asked and answered. You’re more likely to get a useful answer if you provide a reproducible example with your question. This means pasting in a short snippet of code that users can run to arrive at the bug or question you have in mind. Addtionally to Stackoverflow you can just use google.com or seek.org to search for an r related problem. Create a new .R script, write and execute the following code in the .R script and identify where in the IDE the outputs can be found. mtcars ?sum hist(mtcars$mpg) avg_mpg &lt;- mean(mtcars$mpg) random_numbers &lt;- runif(25) history() "],
["github-github-desktop.html", "Chapter 2 GitHub &amp; GitHub Desktop", " Chapter 2 GitHub &amp; GitHub Desktop We will use GitHub to store your data and hand in your assignments. To be able to do so, complete the following steps: Create a free github account. Website https://github.com/ Download, install github desktop and connect it with your account. Download https://desktop.github.com FIGURE 2.1: Project structure example in RStudio. Create a website using R Markdown and host it on Github pages, then submit the link to your website for Assignment 1. You will create the website using this template LabJournalTemplate. To use this, got to and fork thir repository (press the fork button in top right hand corner, then choose your github account) to get started that way. You should now see a copy of this repo in your github account. That means you have all of the files you need to compile a website with RMarkdown. Steps for compiling on your local computer Make sure the rmarkdown package is installed in R-studio: Open R-studio, click the packages tab in the lower left hand corner, click install packages, type in rmarkdown, make sure “install dependencies” is clicked on, then press install. Close R-studio. Open GitHub Deskttop, make sure it is connected to your account, and clone your forked repository to your computer so that you have a local copy of that data. Navigate to the folder you just cloned/downloaded, open the lab_journal_website.Rproj file. This should automatically open R-studio, and your current working environment will be inside this project. That means everything you save will be auto saved to this folder (unless you tell R-studio to save something somewhere else. Have a look at the files tab in the bottom right hand corner. Most files you click will be opened up as text files in the R-studio editor. Click the “Index.Rmd” file. To compile the entire website, find the build tab in the top right hand corner. You should see the option to “build website”. Click this. The website should be built. After the website is built, you should be able to see it in the R-studio browser. There is a little button (blue arrow with a little browser icon) that allows you to pop the website into your default web-browser. This way you can look at the website in your browser. Important: After compilation, all of the files for displaying your website are saved in the folder where your R project resides. When you look at these in a browser (for example, by going to the folder and dragging the index.html file into a browser), you are loading from your disk. Only you will be able to see the website, because it is on your hard-drive. You need to upload to a web server to serve the webpage on the internet. Steps for serving your webpage using github pages Every github repository has the capability of serving html files (web page files) contained in the repository, this is called github pages. How this works depends a little bit on the specific repository you are using. For this repository. The webpage is served from the docs folder. The example files are set so that when you compile the example in R-studio, the output automatically goes into the docs folder. As a result, when you have these files in a github repository, github will serve the html files in your docs folder as a website. Click the Settings (also near top right), scroll down to Github Pages options click the option to serve from docs folder (You should see a little green message above the github pages options with a link to your new webpage). Editing webpage and serving on github Open up the project file in the folder for your repo on your local computer (.rproj file) Edit the .rmd files in R-studio Recompile website (build website when index.rmd is loaded), or knit individual .rmd files send your changes back to the online github repository (note this can be done in github desktop, or directly in R-studio, in R-studio you will see a git tab if you are working in a git repo. Click the git tab, click the diff button, which will show you if there are any new changes. Click each of the files that you want to commit. Write a short note to describe the changes. Press the commit button. Wait a couple seconds, your changes should now be served on your website). † # A data science project step-by-step "],
["information-about-data.html", "2.1 Information about data", " 2.1 Information about data –&gt; See 1st/2nd from skillshare * Total Amount * Amound analyzed Benefits from data analyics (like revenue increase etc.) Pareto /80-20 –&gt; Big increase is pretty simple with low knowledge "],
["application-areas.html", "2.2 Application areas", " 2.2 Application areas (see third skillshare video) Return on investment cost per acquistion sales growth customer retention A/B Testing Predicrive Analytics / ML … https://data36.com/data-science-for-business/ 1. Data Collection 2. Data Storage 3. Data Cleaning 4. Data Analysis 5. Communication, data visualization 6. Data-driven Decision "],
["overview.html", "Chapter 3 Overview", " Chapter 3 Overview Video instructions to install R packages (–y weiter nach hinten) Install the tidyverse package. install.packages(&quot;tidyverse&quot;) Load the tidyverse package. library(tidyverse) Infobox Use tab complete to quickly complete function names as well as file pathes Installing Packages # install package from CRAN install.packages(&quot;dplyr&quot;) Loading packages # load the package to use in the current R session library(&quot;packagename&quot;) # use a particular function within a package without loading the package packagename::functionname "],
["session-01-01.html", "Chapter 4 Introduction to the tidyverse", " Chapter 4 Introduction to the tidyverse (#fig:data-science-workflow_1)Project structure example in RStudio. (#fig:data-science-workflow_2)Typical Tidyverse Workflow The tidyverse is a collection of R packages developed by RStudio’s chief scientist Hadley Wickham. These packages work well together as part of larger data analysis pipeline. To learn more about these tools and how they work together, read R for data science. The following tutorial will introduce some basic functions in tidyverse for structuring and analyzing datasets. This is the first in a three-part series on cleaning data to visualize it in R using the tidyverse. "],
["import-loading-data-with-readr-readxl.html", "4.1 IMPORT - Loading data with readr / readxl", " 4.1 IMPORT - Loading data with readr / readxl Before you can manipulate data with R, you need to import the data into R’s memory, or build a connection to the data that R can use to access the data remotely. How you import your data will depend on the format of the data. The most common way to store small data sets is as a plain text file. Data may also be stored in a proprietary format associated with a specific piece of software, such as SAS, SPSS, or Microsoft Excel. Data used on the internet is often stored as a JSON or XML file. Large data sets may be stored in a database or a distributed storage system. When you import data into R, R stores the data in your computer’s RAM while you manipulate it. This creates a size limitation: truly big data sets should be stored outside of R in a database or distributed storage system. You can then create a connection to the system that R can use to access the data without bringing the data into your computer’s RAM. The tidyverse offers the following packages for importing data: readr for reading flat files like .csv files readxl for .xls and .xlsx sheets. haven for SPSS, Stata, and SAS data. googledrive to interact with files on Google Drive from R. .column{ float: left; width: 25%; padding: 5px; } .row::after{ content: \"\"; clear: both; display: table; } .column{ float: left; width: 25%; padding: 5px; } .row::after{ content: \"\"; clear: both; display: table; } Click on the images to get more information There are a handful of other packages that are not in the tidyverse, but are tidyverse-adjacent. They are very useful for importing data from other sources: jsonlite for JSON. xml2 for XML. httr for web APIs. rvest for web scraping. DBI for relational databases. To connect to a specific database, you’ll need to pair DBI with a specific backend like RSQLite, RPostgres, or odbc. Learn more at https://db.rstudio.com. Example # Loading data (can also be achieved by clicking on &quot;Import Dataset &gt; From Text (readr)&quot; in the upper right corner) library(readr) dataset_tbl &lt;- read_csv(&quot;data.csv&quot;)) # Writing data write_csv(dataset_tbl, &quot;data.csv&quot;) # Saving in csv (or tsv) does mean you loose information about the type of data in particular columns. You can avoid this by using write_rds() and read_rds() to read/write objects in R binary rds format. write_rds(dataset_tbl, &quot;data.rds&quot;) "],
["pipes.html", "4.2 Pipes", " 4.2 Pipes Pipes are a powerful tool for clearly expressing a sequence of multiple operations. You will be using the “pipe”-operator %&gt;% throughout this class. The “pipe” is from the magrittr package. The point of the pipe is to help you write code in a way that is easier to read and understand. It makes your code more readable by structuring sequences of data operations left-to-right (as opposed to from the inside and out). The pipe makes your code read more like a sentence, branching from left to right. You can read it as a series of imperative statements: group, then summarise, then filter. As suggested by this reading, a good way to pronounce %&gt;% when reading code is “then”. Mathematically it can be expressed like the following: x %&gt;% f is equivalent to f(x) x %&gt;% f(y) is equivalent to f(x, y) x %&gt;% f %&gt;% g %&gt;% h is equivalent to h(g(f(x))) Instead of writing this: data &lt;- iris data &lt;- head(data, n=3) you can write the code like this: # The easiest way to get magrittr is to load the whole tidyverse: library(&quot;tidyverse&quot;) # Alternatively, load just magrittr: library(&quot;magrittr&quot;) iris %&gt;% head(n=3) Example When coupling several function calls with the pipe-operator, the benefit will become more apparent. Consider this pseudo example: "],
["tibbles.html", "4.3 Tibbles", " 4.3 Tibbles Throughout this class we work with “tibbles” instead of R’s traditional data.frame. Tibbles are data frames, but they tweak some older behaviours to make life a little easier. R is an old language, and some things that were useful 10 or 20 years ago now get in your way. In most places, the term tibble and data frame will be used interchangeably. tibble is one of the unifying features of tidyverse, it is a better data.frame realization, objects data.frame can be coerced to tibble using as_tibble() When you print a tibble: * all columns that fit the screen are shown, * first 10 rows are shown, * data type for each column is shown. tibble( x = 1, # recycling y = runif(50), z = x + y^2, outcome = rnorm(50) ) as_tibble(cars) Subsetting tibbles vehicles &lt;- as_tibble(cars[1:5,]) vehicles[[&#39;speed&#39;]] vehicles[[1]] vehicles$speed # Using placeholders vehicles %&gt;% .$dist vehicles %&gt;% .[[&#39;dist&#39;]] vehicles %&gt;% .[[2]] "],
["tidy-reshaping-your-data-with-tidyr.html", "4.4 TIDY - Reshaping your data with tidyr", " 4.4 TIDY - Reshaping your data with tidyr The Concept of Tidy Data each and every observation is represented as exactly one row, each and every variable is represented by exactly one column, thus each data table cell contains only one value. FIGURE 4.1: The concept of tidy data Usually data are untidy in only one way. However, if you are unlucky, they are really untidy and thus a pain to work with… For the following example is the Diamonds Dataset used from the ggplot2 package. gather(): Use, if some of your column names are actually values of a variable diamonds2 ## # A tibble: 5 x 3 ## cut `2008` `2009` ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Ideal 326 332 ## 2 Premium 326 332 ## 3 Good 237 333 ## 4 Premium 334 340 ## 5 Good 335 341 diamonds2 %&gt;% gather(`2008`, `2009`, key = &#39;year&#39;, value = &#39;price&#39;) ## # A tibble: 10 x 3 ## cut year price ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Ideal 2008 326 ## 2 Premium 2008 326 ## 3 Good 2008 237 ## 4 Premium 2008 334 ## 5 Good 2008 335 ## 6 Ideal 2009 332 ## 7 Premium 2009 332 ## 8 Good 2009 333 ## 9 Premium 2009 340 ## 10 Good 2009 341 spread(): Use, if some of your observations are scattered across many rows bijou3 bijou3 %&gt;% spread(key=dimension, value=measurement) %&gt;% head(n = 5) "],
["transform-data-transformations-with-dplyr.html", "4.5 TRANSFORM - Data Transformations with dplyr", " 4.5 TRANSFORM - Data Transformations with dplyr Often you’ll need to create some new variables or summaries, or maybe you just want to rename the variables or reorder the observations in order to make the data a little easier to work with. dplyr is a grammar of data manipulation, providing a consistent set of verbs that help you solve the most common data manipulation challenges. The following five key dplyr functions allow you to solve the vast majority of your data manipulation challenges: filter() picks cases based on their values. So it can be used for selecting the relevant rows. diamonds %&gt;% filter(cut == &#39;Ideal&#39; | cut == &#39;Premium&#39;, carat &gt;= 0.23) %&gt;% head(5) ## # A tibble: 5 x 10 ## carat cut color clarity depth table price x y z ## &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt; &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.23 Ideal E SI2 61.5 55 326 3.95 3.98 2.43 ## 2 0.290 Premium I VS2 62.4 58 334 4.2 4.23 2.63 ## 3 0.23 Ideal J VS1 62.8 56 340 3.93 3.9 2.46 ## 4 0.31 Ideal J SI2 62.2 54 344 4.35 4.37 2.71 ## 5 0.32 Premium E I1 60.9 58 345 4.38 4.42 2.68 arrange() changes the ordering of the rows diamonds %&gt;% arrange(cut, carat, desc(price)) ## # A tibble: 53,940 x 10 ## carat cut color clarity depth table price x y z ## &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt; &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.22 Fair E VS2 65.1 61 337 3.87 3.78 2.49 ## 2 0.23 Fair G VVS2 61.4 66 369 3.87 3.91 2.39 ## 3 0.25 Fair F SI2 54.4 64 1013 4.3 4.23 2.32 ## 4 0.25 Fair D VS1 61.2 55 563 4.09 4.11 2.51 ## 5 0.25 Fair E VS1 55.2 64 361 4.21 4.23 2.33 ## 6 0.27 Fair E VS1 66.4 58 371 3.99 4.02 2.66 ## 7 0.290 Fair F SI1 55.8 60 1776 4.48 4.41 2.48 ## 8 0.290 Fair D VS2 64.7 62 592 4.14 4.11 2.67 ## 9 0.3 Fair D IF 60.5 57 1208 4.47 4.35 2.67 ## 10 0.3 Fair E VVS2 51 67 945 4.67 4.62 2.37 ## # … with 53,930 more rows The NAs always end up at the end of the rearranged tibble. select() picks variables based on their names diamonds %&gt;% select(color, clarity, x:z) %&gt;% head(n = 5) ## # A tibble: 5 x 5 ## color clarity x y z ## &lt;ord&gt; &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 E SI2 3.95 3.98 2.43 ## 2 E SI1 3.89 3.84 2.31 ## 3 E VS1 4.05 4.07 2.31 ## 4 I VS2 4.2 4.23 2.63 ## 5 J SI2 4.34 4.35 2.75 Exclusive select: diamonds %&gt;% select(-(x:z)) %&gt;% head(n = 5) ## # A tibble: 5 x 7 ## carat cut color clarity depth table price ## &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt; &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 0.23 Ideal E SI2 61.5 55 326 ## 2 0.21 Premium E SI1 59.8 61 326 ## 3 0.23 Good E VS1 56.9 65 327 ## 4 0.290 Premium I VS2 62.4 58 334 ## 5 0.31 Good J SI2 63.3 58 335 Select helpers use everything() to bring some columns to the front: bijou %&gt;% select(x:z, everything()) %&gt;% head(n = 5) rename() diamonds %&gt;% rename(var_x = x) %&gt;% head(n = 5) ## # A tibble: 5 x 10 ## carat cut color clarity depth table price var_x y z ## &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt; &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.23 Ideal E SI2 61.5 55 326 3.95 3.98 2.43 ## 2 0.21 Premium E SI1 59.8 61 326 3.89 3.84 2.31 ## 3 0.23 Good E VS1 56.9 65 327 4.05 4.07 2.31 ## 4 0.290 Premium I VS2 62.4 58 334 4.2 4.23 2.63 ## 5 0.31 Good J SI2 63.3 58 335 4.34 4.35 2.75 mutate() adds new variables that are functions of existing variables. transmute() diamonds %&gt;% mutate(p = x + z, q = p + y) %&gt;% select(-(depth:price)) %&gt;% head(n = 5) ## # A tibble: 5 x 9 ## carat cut color clarity x y z p q ## &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt; &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.23 Ideal E SI2 3.95 3.98 2.43 6.38 10.4 ## 2 0.21 Premium E SI1 3.89 3.84 2.31 6.2 10.0 ## 3 0.23 Good E VS1 4.05 4.07 2.31 6.36 10.4 ## 4 0.290 Premium I VS2 4.2 4.23 2.63 6.83 11.1 ## 5 0.31 Good J SI2 4.34 4.35 2.75 7.09 11.4 diamonds %&gt;% transmute(carat, cut, sum = x + y + z) %&gt;% head(n = 5) ## # A tibble: 5 x 3 ## carat cut sum ## &lt;dbl&gt; &lt;ord&gt; &lt;dbl&gt; ## 1 0.23 Ideal 10.4 ## 2 0.21 Premium 10.0 ## 3 0.23 Good 10.4 ## 4 0.290 Premium 11.1 ## 5 0.31 Good 11.4 group_by() and summarize() reduces multiple values down to a single summary diamonds %&gt;% group_by(cut) %&gt;% summarize(max_price = max(price), mean_price = mean(price), min_price = min(price)) ## # A tibble: 5 x 4 ## cut max_price mean_price min_price ## &lt;ord&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; ## 1 Fair 18574 4359. 337 ## 2 Good 18788 3929. 327 ## 3 Very Good 18818 3982. 336 ## 4 Premium 18823 4584. 326 ## 5 Ideal 18806 3458. 326 glimpse() "],
["lubridate.html", "4.6 Lubridate", " 4.6 Lubridate "],
["stringr.html", "4.7 Stringr", " 4.7 Stringr "],
["purrr.html", "4.8 Purrr", " 4.8 Purrr needed here? "],
["business-case-sales-analysis.html", "Chapter 5 Business case - Sales Analysis", " Chapter 5 Business case - Sales Analysis Sales Analysis Overview Overall goals Introductory words … You are a data scientist. Your assignment is to … study the products … looking for opportunities to sell new producgts better serve the customer better market the products justify it by data … Goals for this session Get your hands into R with a real world situation Analyze Sales over time of products sold through the Olist Store Sales by Year Sales by secondary product category Steps Import flatfiles databases scrape Wrangle data examine data clean data join data Visualize data Context Olist is the largest department store in Brazilian marketplaces. Olist connects small businesses from all over Brazil to channels without hassle and with a single contract. Those merchants are able to sell their products through the Olist Store and ship them directly to the customers using Olist logistics partners. See more on their website: www.olist.com After a customer purchases the product from Olist Store a seller gets notified to fulfill that order. Once the customer receives the product, or the estimated delivery date is due, the customer gets a satisfaction survey by email where he can give a note for the purchase experience and write down some comments. FIGURE 5.1: Project structure example in RStudio. "],
["theory-background.html", "5.1 Theory / Background", " 5.1 Theory / Background 5.1.1 Transactional data FIGURE 5.2: Project structure example in RStudio. The Entity Relationship Diagram (ERD) Types of database relationships (1-to-1, 1-to-many,many-to-many) 5.1.2 data schema The data is divided in multiple datasets for better understanding and organization. Please refer to the following data schema when working with it: FIGURE 5.3: Project structure example in RStudio. insert explanation and screenshots of the excel files The dataset has information of 100k orders from 2016 to 2018 made at multiple marketplaces in Brazil. Its features allows viewing an order from multiple dimensions: from order status, price, payment and freight performance to customer location, product attributes and finally reviews written by customers. In addition a geolocation dataset that relates Brazilian zip codes to lat/lng coordinates is released. This is real commercial data, it has been anonymised, and references to the companies and partners in the review text have been replaced with the names of Game of Thrones great houses. Attention An order might have multiple items. Each item might be fulfilled by a distinct seller. All text identifying stores and partners where replaced by the names of Game of Thrones great houses. It was also a Marketing Funnel Dataset released. Both datasets may be joined to see an order from Marketing perspective! FIGURE 5.4: Project structure example in RStudio. Inspiration Here are some inspiration for possible outcomes from this dataset. NLP: This dataset offers a supreme environment to parse out the reviews text through its multiple dimensions. Clustering: Some customers didn’t write a review. But why are they happy or mad? Sales Prediction: With purchase date information you’ll be able to predict future sales. Delivery Performance: You will also be able to work through delivery performance and find ways to optimize delivery times. Product Quality: Enjoy yourself discovering the products categories that are more prone to customer insatisfaction. Feature Engineering: Create features from this rich dataset or attach some external public information to it. "],
["project-setup.html", "5.2 Project Setup", " 5.2 Project Setup 5.2.1 Project structure Download DS_business_case.zip FIGURE 5.5: Project structure example in RStudio. 5.2.2 Setup (Template File) Download the template we will be using for the analysis Download s01-02_sales_analysis.R The content of the file looks like this: # datascience at NIT ------------------------------------------------------ # 1.0 Load libraries ---- library(tidyverse) library(lubridate) library(tidyquant) library(readxl) library(writexl) # 2.0 Importing Files ---- # 3.0 Examining Data ---- # 4.0 Joining Data ---- # 5.0 Wrangling Data ---- # 6.0 Business Insights ---- # 6.1 Sales by Year ---- # Step 1 - Manipulate # Step 2 - Visualize # 6.2 Sales by Year and Category 2 ---- # Step 1 - Manipulate # Step 2 - Visualize # 7.0 Writing Files ---- # 7.1 Excel ---- # 7.2 CSV ---- # 7.3 RDS ---- 5.2.3 Installing Packages Download session_01_install_pkgs.R package deoendencies c operatior stands for combining elements control + enter or cmd + enter global environment output to the screen (print) comments (not being added to the cvector) explanation of the right hand corner (packages, etc) Errors: what to do in case of errors during installation (maybe Rtools is needed, windows users) Doy you want to install from source the packages which need compilation 5.2.4 Checkpoint Key Checks at this Point User Library Verification Directory Structure Verification "],
["import.html", "5.3 Import", " 5.3 Import 5.3.1 Checkpoint "],
["examine.html", "5.4 Examine", " 5.4 Examine regular print (output tibble to console) open data window (view() function), filtering etc. glimpse() function (prints it out in a transpose fashoin) –&gt; Objective: Combine the three tibbles into one that can be analyzed "],
["cleaning-and-joining-data.html", "5.5 Cleaning and joining data", " 5.5 Cleaning and joining data library(dplyr) library(tidyr) library(tidyverse) left_join, rbind, filtering, naming, pipe operator, … group_by, summarize 5.5.1 Checkpoint "],
["session-01-challenge.html", "5.6 Session 01 Challenge", " 5.6 Session 01 Challenge Download sales_analysis.rmd Rmarkdown file with instructions! # --- # title: &quot;Week 2 Challenge&quot; # author: &quot;Business Science&quot; # date: &quot;12/30/2018&quot; # output: # html_document: # toc: TRUE # theme: flatly # highlight: tango # code_folding: show # --- # # ```{r setup, include=FALSE} # knitr::opts_chunk$set( # echo = TRUE # ) # ``` # # # Challenge Summary # # This is a short challenge to begin applying what you are learning to the problem at hand. You will go through a series of questions related to the course project goals: # # 1. Coming up with a new product idea, and # # 2. Segmenting the customer-base # # # Objectives # # 1. Apply `dplyr` and `tidyr` functions to answer questions related to the course projects. # # 2. Gain exposure to `rmarkdown` # # # Data # # To read the data, make sure that the paths point to the appropriate data sets. Saving the file in the main directory should enable the paths to be detected correctly. # # ```{r, message=FALSE, warning=FALSE} # # Load libraries # library(tidyverse) # ``` # # ```{r} # # Read bike orderlines data # path_bike_orderlines &lt;- &quot;00_data/bike_sales/data_wrangled/bike_orderlines.rds&quot; # bike_orderlines_tbl &lt;- read_rds(path_bike_orderlines) # # glimpse(bike_orderlines_tbl) # ``` # # ```{r} # # Read bikes data # path_bikes &lt;- &quot;00_data/bike_sales//data_raw/bikes.xlsx&quot; # bikes_tbl &lt;- readxl::read_excel(path_bikes) # # glimpse(bikes_tbl) # ``` # # # Questions # # # # ## 1. What are the unique categories of products? (Difficulty = Low) # # - Begin with `bike_orderlines_tbl` # - Use `distinct()` to evaluate # # Review Primary Product Category (`category_1`). # # ```{r} # # ``` # # # Review Secondary Product Category (`category_2`). # # ```{r} # # ``` # # Review Frame Material (`frame_material`). # # ```{r} # # ``` # # # ## 2. Which product categories have the most sales? (Difficulty = Medium) # # - Select appropriate columns from `bike_orderlines_tbl` # - Group and summarize the data calling the new column `Sales`. Make sure to ungroup. # - Arrange descending by `Sales` # - Rename column names to `Primary Category`, `Secondary Category`, or `Frame Material` (as appropriate). # - Format the Sales as `dollar()` # # Review Primary Product Category (`category_1`). # # ```{r} # # # ``` # # Review Secondary Product Category (`category_2`). # # ```{r} # # # ``` # # # Review Frame Material (`frame_material`). # # ```{r} # # "],
["session-01-solution.html", "5.7 Session 01 Solution", " 5.7 Session 01 Solution Download session_01_solution.R FIGURE 5.6: Project structure example in RStudio. # DS4B 101-R: R FOR BUSINESS ANALYSIS ---- # JUMPSTART: First Sales Analysis ---- # 1.0 Load libraries ---- # Work horse packages library(tidyverse) library(lubridate) # theme_tq() library(tidyquant) # Excel Files library(readxl) library(writexl) # 2.0 Importing Files ---- ?read_excel() bikes_tbl &lt;- read_excel(path = &quot;00_data/bike_sales/data_raw/bikes.xlsx&quot;) bikeshops_tbl &lt;- read_excel(&quot;00_data/bike_sales/data_raw/bikeshops.xlsx&quot;) orderlines_tbl &lt;- read_excel(&quot;00_data/bike_sales/data_raw/orderlines.xlsx&quot;) names(orderlines_tbl)[1] &lt;- &quot;X__1&quot; # 3.0 Examining Data ---- bikes_tbl glimpse(bikes_tbl) bikeshops_tbl orderlines_tbl # 4.0 Joining Data ---- ?left_join orderlines_tbl bikes_tbl left_join(orderlines_tbl, bikes_tbl, by = c(&quot;product.id&quot; = &quot;bike.id&quot;)) bike_orderlines_joined_tbl &lt;- orderlines_tbl %&gt;% left_join(bikes_tbl, by = c(&quot;product.id&quot; = &quot;bike.id&quot;)) %&gt;% left_join(bikeshops_tbl, by = c(&quot;customer.id&quot; = &quot;bikeshop.id&quot;)) bike_orderlines_joined_tbl bike_orderlines_joined_tbl %&gt;% glimpse() # 5.0 Wrangling Data ---- bike_orderlines_wrangled_tbl &lt;- bike_orderlines_joined_tbl %&gt;% # Separate description into category.1, category.2, and frame.material separate(description, into = c(&quot;category.1&quot;, &quot;category.2&quot;, &quot;frame.material&quot;), sep = &quot; - &quot;, remove = TRUE) %&gt;% # Separate location into city and state separate(location, into = c(&quot;city&quot;, &quot;state&quot;), sep = &quot;, &quot;, remove = FALSE) %&gt;% # price extended mutate(total.price = price * quantity) %&gt;% # Reorganize select(-X__1, -location) %&gt;% select(-ends_with(&quot;.id&quot;)) %&gt;% bind_cols(bike_orderlines_joined_tbl %&gt;% select(order.id)) %&gt;% # Reorder columns select(contains(&quot;date&quot;), contains(&quot;id&quot;), contains(&quot;order&quot;), quantity, price, total.price, everything()) %&gt;% # Renaming columns rename(order_date = order.date) %&gt;% set_names(names(.) %&gt;% str_replace_all(&quot;\\\\.&quot;, &quot;_&quot;)) bike_orderlines_wrangled_tbl %&gt;% glimpse() # 6.0 Business Insights ---- # 6.1 Sales by Year ---- # Step 1 - Manipulate sales_by_year_tbl &lt;- bike_orderlines_wrangled_tbl %&gt;% # Selecting columns to focus on and adding a year column select(order_date, total_price) %&gt;% mutate(year = year(order_date)) %&gt;% # Grouping by year, and summarizing sales group_by(year) %&gt;% summarize(sales = sum(total_price)) %&gt;% ungroup() %&gt;% # $ Format Text mutate(sales_text = scales::dollar(sales)) sales_by_year_tbl # Step 2 - Visualize sales_by_year_tbl %&gt;% # Setup canvas with year (x-axis) and sales (y-axis) ggplot(aes(x = year, y = sales)) + # Geometries geom_col(fill = &quot;#2c3e50&quot;) + geom_label(aes(label = sales_text)) + geom_smooth(method = &quot;lm&quot;, se = FALSE) + # Formatting theme_tq() + scale_y_continuous(labels = scales::dollar) + labs( title = &quot;Revenue by Year&quot;, subtitle = &quot;Upward trend&quot;, x = &quot;&quot;, y = &quot;Revenue&quot; ) # 6.2 Sales by Year and Category 2 ---- # Step 1 - Manipulate sales_by_year_cat_2_tbl &lt;- bike_orderlines_wrangled_tbl %&gt;% # Selecting columns and add a year select(order_date, total_price, category_2) %&gt;% mutate(year = year(order_date)) %&gt;% # Groupby and Summarize year and category 2 group_by(year, category_2) %&gt;% summarise(sales = sum(total_price)) %&gt;% ungroup() %&gt;% # Format $ Text mutate(sales_text = scales::dollar(sales)) sales_by_year_cat_2_tbl # Step 2 - Visualize sales_by_year_cat_2_tbl %&gt;% # Set up x, y, fill ggplot(aes(x = year, y = sales, fill = category_2)) + # Geometries geom_col() + geom_smooth(method = &quot;lm&quot;, se = FALSE) + # Facet facet_wrap(~ category_2, ncol = 3, scales = &quot;free_y&quot;) + # Formatting theme_tq() + scale_fill_tq() + scale_y_continuous(labels = scales::dollar) + labs( title = &quot;Revenue by Year and Category 2&quot;, subtitle = &quot;Each product category has an upward trend&quot;, x = &quot;&quot;, y = &quot;Revenue&quot;, fill = &quot;Product Secondary Category&quot; ) # 7.0 Writing Files ---- fs::dir_create(&quot;00_data/bike_sales/data_wrangled_student&quot;) # 7.1 Excel ---- bike_orderlines_wrangled_tbl %&gt;% write_xlsx(&quot;00_data/bike_sales/data_wrangled_student/bike_orderlines.xlsx&quot;) # 7.2 CSV ---- bike_orderlines_wrangled_tbl %&gt;% write_csv(&quot;00_data/bike_sales/data_wrangled_student/bike_orderlines.csv&quot;) # 7.3 RDS ---- bike_orderlines_wrangled_tbl %&gt;% write_rds(&quot;00_data/bike_sales/data_wrangled_student/bike_orderlines.rds&quot;) "],
["challenge.html", "Chapter 6 Challenge", " Chapter 6 Challenge Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Curabitur pretium tincidunt lacus. Nulla gravida orci a odio. Nullam varius, turpis et commodo pharetra, est eros bibendum elit, nec luctus magna felis sollicitudin mauris. Integer in mauris eu nibh euismod gravida. Duis ac tellus et risus vulputate vehicula. Donec lobortis risus a elit. Etiam tempor. Ut ullamcorper, ligula eu tempor congue, eros est euismod turpis, id tincidunt sapien risus a quam. Maecenas fermentum consequat mi. Donec fermentum. Pellentesque malesuada nulla a mi. Duis sapien sem, aliquet nec, commodo eget, consequat quis, neque. Aliquam faucibus, elit ut dictum aliquet, felis nisl adipiscing sapien, sed malesuada diam lacus eget erat. Cras mollis scelerisque nunc. Nullam arcu. Aliquam consequat. Curabitur augue lorem, dapibus quis, laoreet et, pretium ac, nisi. Aenean magna nisl, mollis quis, molestie eu, feugiat in, orci. In hac habitasse platea dictumst. "],
["overview-1.html", "Chapter 7 Overview", " Chapter 7 Overview "],
["session-01-02.html", "Chapter 8 Data visualization with ggplot", " Chapter 8 Data visualization with ggplot Every ggplot2 plot has three key components: data, A set of aesthetic mappings between variables in the data and visual properties, and At least one layer which describes how to render each observation. Layers are usually created with a geom function. "],
["visualize-introduction-to-visualization-in-ggplot2.html", "8.1 VISUALIZE - Introduction To Visualization In ggplot2", " 8.1 VISUALIZE - Introduction To Visualization In ggplot2 "],
["adding-complexity-to-visualizations.html", "8.2 Adding Complexity To Visualizations", " 8.2 Adding Complexity To Visualizations "],
["customizing-your-plots.html", "8.3 Customizing Your Plots", " 8.3 Customizing Your Plots "],
["business-case-sales-analysis-1.html", "Chapter 9 Business case - Sales Analysis ", " Chapter 9 Business case - Sales Analysis "],
["checkpoint-3.html", "9.1 Checkpoint", " 9.1 Checkpoint "],
["challenge-1.html", "Chapter 10 Challenge", " Chapter 10 Challenge # # Challenge Summary # # This is a short challenge to begin applying what you are learning to the problem at hand. You will go through a series of questions related to the course project goals: # # 1. Coming up with a new product idea, and # # 2. Segmenting the customer-base # # # Objectives # # 1. Apply `dplyr` and `tidyr` functions to answer questions related to the course projects. # # 2. Gain exposure to `rmarkdown` # # # Data # # To read the data, make sure that the paths point to the appropriate data sets. Saving the file in the main directory should enable the paths to be detected correctly. # # ```{r, message=FALSE, warning=FALSE} # # Load libraries # library(tidyverse) # ``` # # ```{r} # # Read bike orderlines data # path_bike_orderlines &lt;- &quot;00_data/bike_sales/data_wrangled/bike_orderlines.rds&quot; # bike_orderlines_tbl &lt;- read_rds(path_bike_orderlines) # # glimpse(bike_orderlines_tbl) # ``` # # ```{r} # # Read bikes data # path_bikes &lt;- &quot;00_data/bike_sales//data_raw/bikes.xlsx&quot; # bikes_tbl &lt;- readxl::read_excel(path_bikes) # # glimpse(bikes_tbl) # ``` # # # Questions # # # # ## 1. What are the unique categories of products? (Difficulty = Low) # # - Begin with `bike_orderlines_tbl` # - Use `distinct()` to evaluate # # Review Primary Product Category (`category_1`). # # ```{r} # bike_orderlines_tbl %&gt;% # distinct(category_1) # ``` # # # Review Secondary Product Category (`category_2`). # # ```{r} # bike_orderlines_tbl %&gt;% # distinct(category_2) # ``` # # Review Frame Material (`frame_material`). # # ```{r} # bike_orderlines_tbl %&gt;% # distinct(frame_material) # ``` # # # ## 2. Which product categories have the most sales? (Difficulty = Medium) # # - Select appropriate columns from `bike_orderlines_tbl` # - Group and summarize the data calling the new column `Sales`. Make sure to ungroup. # - Arrange descending by `Sales` # - Rename column names to `Primary Category`, `Secondary Category`, or `Frame Material` (as appropriate). # - Format the Sales as `dollar()` # # Review Primary Product Category (`category_1`). # # ```{r} # bike_orderlines_tbl %&gt;% # # # Select columns # select(category_1, total_price) %&gt;% # # # Group and summarize # group_by(category_1) %&gt;% # summarize(sales = sum(total_price)) %&gt;% # ungroup() %&gt;% # # # Arrange descending # arrange(desc(sales)) %&gt;% # # # Rename columns # rename( # `Primary Category` = category_1, # Sales = sales # ) %&gt;% # # # Format dollar # mutate(Sales = Sales %&gt;% scales::dollar()) # # ``` # # Review Secondary Product Category (`category_2`). # # ```{r} # bike_orderlines_tbl %&gt;% # # # Select columns # select(category_2, total_price) %&gt;% # # # Group and summarize # group_by(category_2) %&gt;% # summarize(sales = sum(total_price)) %&gt;% # ungroup() %&gt;% # # # Arrange descending # arrange(desc(sales)) %&gt;% # # # Rename columns # rename( # `Secondary Category` = category_2, # Sales = sales # ) %&gt;% # # # Format dollar # mutate(Sales = Sales %&gt;% scales::dollar()) # # ``` # # # Review Frame Material (`frame_material`). # # ```{r} # bike_orderlines_tbl %&gt;% # # # Select columns # select(frame_material, total_price) %&gt;% # # # Group and summarize # group_by(frame_material) %&gt;% # summarize(sales = sum(total_price)) %&gt;% # ungroup() %&gt;% # # # Arrange descending # arrange(desc(sales)) %&gt;% # # # Rename columns # # Rename columns # rename( # `Frame Material` = frame_material, # Sales = sales # ) %&gt;% # # # Format dollar # mutate(Sales = Sales %&gt;% scales::dollar()) # # ``` # # ## 3. Do all combinations primary and secondary bike category contain both Aluminum and Carbon frame materials? (Difficulty = High) # # Hint - Use summarized sales values and `spread()` to identify gaps in frame materials. # # - Select `category_1`, `category_2`, `frame_material`, and `total_price` # - Summarize the data using group by, summarize and ungroup. # - Pivot the frame material and sales column into Alumninum and Carbon # - Fill `NA` values with zeros # - Add a `total_sales` column # - Arrange descending by `total_sales` # - Format all numbers as `dollar()` # - Rename all Columns: Primary Category, Secondary Category, Aluminum, Carbon, Total Sales # # ```{r} # bike_orderlines_tbl %&gt;% # # # Select columns # select(category_1, category_2, frame_material, total_price) %&gt;% # # # group_by, summarize, ungroup # group_by(category_1, category_2, frame_material) %&gt;% # summarize(sales = sum(total_price)) %&gt;% # ungroup() %&gt;% # # # spread # spread(key = frame_material, value = sales) %&gt;% # # # replace NA # replace_na(list(Aluminum = 0, Carbon = 0)) %&gt;% # # # Add Total Sales column # mutate(total_sales = Aluminum + Carbon) %&gt;% # # # Arrange descending # arrange(desc(total_sales)) %&gt;% # # # Format dollar # mutate( # Aluminum = scales::dollar(Aluminum), # Carbon = scales::dollar(Carbon), # total_sales = scales::dollar(total_sales) # ) %&gt;% # # # Rename columns # rename( # `Primary Category` = category_1, # `Secondary Category` = category_2, # `Total Sales` = total_sales # ) FIGURE 10.1: sakila db "],
["overview-2.html", "Chapter 11 Overview", " Chapter 11 Overview "],
["session-01-03.html", "Chapter 12 Data manipulation ", " Chapter 12 Data manipulation "],
["time-series.html", "12.1 Time Series", " 12.1 Time Series library(tidyverse) library(lubridate) library(tidyquant) "],
["text-fundamentals.html", "12.2 Text Fundamentals", " 12.2 Text Fundamentals library(stringr) Regex "],
["categorical-data.html", "12.3 Categorical data", " 12.3 Categorical data library(forcats) "],
["functional-programming.html", "12.4 Functional Programming", " 12.4 Functional Programming Learn to build functions Loops, apply-family library(purrr) "],
["business-case-sales-analysis-2.html", "Chapter 13 Business case - Sales Analysis ", " Chapter 13 Business case - Sales Analysis "],
["checkpoint-4.html", "13.1 Checkpoint", " 13.1 Checkpoint "],
["challenge-2.html", "Chapter 14 Challenge", " Chapter 14 Challenge "],
["overview-3.html", "Chapter 15 Overview", " Chapter 15 Overview "],
["session-01-04.html", "Chapter 16 Machine Learning concepts ", " Chapter 16 Machine Learning concepts "],
["customer-segmentation-with-k-means-clustering-umap.html", "16.1 Customer Segmentation with K-Means Clustering &amp; UMAP", " 16.1 Customer Segmentation with K-Means Clustering &amp; UMAP "],
["ml-linear-algorithms.html", "16.2 ML - Linear Algorithms", " 16.2 ML - Linear Algorithms "],
["ml-tree-based-algorithms.html", "16.3 ML - Tree Based Algorithms", " 16.3 ML - Tree Based Algorithms "],
["ml-preprocessing-svm.html", "16.4 ML - Preprocessing &amp; SVM", " 16.4 ML - Preprocessing &amp; SVM "],
["testing-the-models.html", "16.5 Testing the models", " 16.5 Testing the models "],
["business-case-company-segmentation-with-stock-prices.html", "Chapter 17 Business case - Company Segmentation with Stock Prices", " Chapter 17 Business case - Company Segmentation with Stock Prices Session 04 - Challenge - Predicting new product model ## Checkpoint # Challenge "],
["overview-4.html", "Chapter 18 Overview", " Chapter 18 Overview Goal * PDF Report Interactive Report "],
["session-01-05.html", "Chapter 19 Communication basics ", " Chapter 19 Communication basics "],
["reports-pdf.html", "19.1 Reports (PDF)", " 19.1 Reports (PDF) Example Report with RMarkdown "],
["presentation-ioslides.html", "19.2 Presentation • ioslides", " 19.2 Presentation • ioslides "],
["presentation-revealjs.html", "19.3 Presentation • revealjs", " 19.3 Presentation • revealjs "],
["presentation-xaringang.html", "19.4 Presentation • xaringang", " 19.4 Presentation • xaringang "],
["interactive-report-with-plotly.html", "Chapter 20 Interactive Report with plotly", " Chapter 20 Interactive Report with plotly "],
["business-case-reporting.html", "Chapter 21 Business case - Reporting ", " Chapter 21 Business case - Reporting "],
["checkpoint-5.html", "21.1 Checkpoint", " 21.1 Checkpoint "],
["challenge-3.html", "Chapter 22 Challenge", " Chapter 22 Challenge "],
["overview-5.html", "Chapter 23 Overview", " Chapter 23 Overview Goal * Flexdashboard "],
["session-01-06.html", "Chapter 24 Flexdashboard basics", " Chapter 24 Flexdashboard basics "],
["business-case-dashboatd-flex.html", "Chapter 25 Business case - Dashboatd (Flex) ", " Chapter 25 Business case - Dashboatd (Flex) "],
["checkpoint-6.html", "25.1 Checkpoint", " 25.1 Checkpoint "],
["challenge-4.html", "Chapter 26 Challenge", " Chapter 26 Challenge "],
["overview-6.html", "Chapter 27 Overview", " Chapter 27 Overview Goal * Shiny Apps FIGURE 27.1: shiny app example in RStudio. "],
["session-01-07.html", "Chapter 28 Shiny basics", " Chapter 28 Shiny basics "],
["business-case-stock-analyzer.html", "Chapter 29 Business case - STock Analyzer ", " Chapter 29 Business case - STock Analyzer "],
["checkpoint-7.html", "29.1 Checkpoint", " 29.1 Checkpoint "],
["challenge-5.html", "Chapter 30 Challenge", " Chapter 30 Challenge "],
["references.html", "References", " References "]
]
