[
["welcome.html", "DATA SCIENCE Course script Module from our certificate program Welcome", " DATA SCIENCE Course script Module from our certificate program Joschka Schwarz 2020-03-30 Welcome This script are the class notes used in the NIT Data Science course. It will teach you how to program in R, with hands-on examples for business analytics. It is written for non-programmers to provide a friendly introduction to the R language. You’ll learn how to load data, assemble and disassemble data objects, navigate R’s environment system, write your own functions, and use all of R’s programming tools. "],
["preface.html", "Preface", " Preface This book will teach you how to program in R. You’ll go from loading data to writing your own functions (which will outperform the functions of other R users). But this is not a typical introduction to R. I want to help you become a data scientist, as well as a computer scientist, so this book will focus on the programming skills that are most related to data science. The chapters in the book are arranged according to three practical projects–given that they’re fairly substantial projects, they span multiple chapters. I chose these projects for two reasons. First, they cover the breadth of the R language. You will learn how to load data, assemble and disassemble data objects, navigate R’s environment system, write your own functions, and use all of R’s programming tools, such as if else statements, for loops, S3 classes, R’s package system, and R’s debugging tools. The projects will also teach you how to write vectorized R code, a style of lightning-fast code that takes advantage of all of the things R does best. But, more importantly, the projects will teach you how to solve the logistical problems of data science—and there are many logistical problems. When you work with data, you will need to store, retrieve, and manipulate large sets of values without introducing errors. As you work through the book, I will teach you not just how to program with R, but how to use the programming skills to support your work as a data scientist. Not every programmer needs to be a data scientist, so not every programmer will find this book useful. You will find this book helpful if you’re in one of the following categories: You already use R as a statistical tool, but you would like to learn how to write your own functions and simulations with R. You would like to teach yourself how to program, and you see the sense of learning a language related to data science. One of the biggest surprises in this book is that I do not cover traditional applications of R, such as models and graphs; instead, I treat R purely as a programming language. Why this narrow focus? R is designed to be a tool that helps scientists analyze data. It has many excellent functions that make plots and fit models to data. As a result, many statisticians learn to use R as if it were a piece of software—they learn which functions do what they want, and they ignore the rest. This is an understandable approach to learning R. Visualizing and modeling data are complicated skills that require a scientist’s full attention. It takes expertise, judgement, and focus to extract reliable insights from a data set. I would not recommend that any data scientist distract herself with computer programming until she feels comfortable with the basic theory and practice of her craft. If you would like to learn the craft of data science, I recommend the book R for Data Science, my companion volume to this book, co-written with Hadley Wickham. However, learning to program should be on every data scientist’s to-do list. Knowing how to program will make you a more flexible analyst and augment your mastery of data science in every way. My favorite metaphor for describing this was introduced by Greg Snow on the R help mailing list in May 2006. Using functions in R is like riding a bus. Writing functions in R is like driving a car. Busses are very easy to use, you just need to know which bus to get on, where to get on, and where to get off (and you need to pay your fare). Cars, on the other hand, require much more work: you need to have some type of map or directions (even if the map is in your head), you need to put gas in every now and then, you need to know the rules of the road (have some type of drivers license). The big advantage of the car is that it can take you a bunch of places that the bus does not go and it is quicker for some trips that would require transferring between busses. Using this analogy, programs like SPSS are busses, easy to use for the standard things, but very frustrating if you want to do something that is not already preprogrammed. R is a 4-wheel drive SUV (though environmentally friendly) with a bike on the back, a kayak on top, good walking and running shoes in the passenger seat, and mountain climbing and spelunking gear in the back. R can take you anywhere you want to go if you take time to learn how to use the equipment, but that is going to take longer than learning where the bus stops are in SPSS. - Greg Snow Greg compares R to SPSS, but he assumes that you use the full powers of R; in other words, that you learn how to program in R. If you only use functions that preexist in R, you are using R like SPSS: it is a bus that can only take you to certain places. This flexibility matters to data scientists. The exact details of a method or simulation will change from problem to problem. If you cannot build a method tailored to your situation, you may find yourself tempted to make unrealistic assumptions just so you can use an ill-suited method that already exists. This book will help you make the leap from bus to car. I have written it for beginning programmers. I do not talk about the theory of computer science—there are no discussions of big O() and little o() in these pages. Nor do I get into advanced details such as the workings of lazy evaluation. These things are interesting if you think of computer science at the theoretical level, but they are a distraction when you first learn to program. Instead, I teach you how to program in R with three concrete examples. These examples are short, easy to understand, and cover everything you need to know. I have taught this material many times in my job as Master Instructor at RStudio. As a teacher, I have found that students learn abstract concepts much faster when they are illustrated by concrete examples. The examples have a second advantage, as well: they provide immediate practice. Learning to program is like learning to speak another language—you progress faster when you practice. In fact, learning to program is learning to speak another language. You will get the best results if you follow along with the examples in the book and experiment whenever an idea strikes you. The book is a companion to R for Data Science. In that book, Hadley Wickham and I explain how to use R to make plots, model data, and write reports. That book teaches these tasks as data-science skills, which require judgement and expertise—not as programming exercises, which they also are. This book will teach you how to program in R. It does not assume that you have mastered the data-science skills taught in R for Data Science (nor that you ever intend to). However, this skill set amplifies that one. And if you master both, you will be a powerful, computer-augmented data scientist, fit to command a high salary and influence scientific dialogue. "],
["why-r.html", "0.1 Why R?", " 0.1 Why R? It’s easy to get distracted by Tableau and PowerBI’s visuals, but when it comes to making business decisions, your organization needs to be able to take actions. This is where R Shiny is lightyears ahead of the other tools - R Shiny is a powerful ecosystem for business + data science + apps. "],
["prerquisites.html", "0.2 Prerquisites", " 0.2 Prerquisites There is no prerequisite knowledge needed in R Programming, Data Science, or Machine Learning. "],
["conventions-used-in-this-book.html", "0.3 Conventions Used in This Book", " 0.3 Conventions Used in This Book The following typographical conventions are used in this book: Italic:: Indicates new terms, URLs, email addresses, filenames, and file extensions. Constant width:: Used for program listings, as well as within paragraphs to refer to program elements such as variable or function names, databases, data types, environment variables, statements, and keywords. Constant width bold:: Shows commands or other text that should be typed literally by the user. Constant width italic:: Shows text that should be replaced with user-supplied values or by values determined by context. To comment or ask technical questions about this book, please file an issue at github.com/rstudio-education/hopr. "],
["session-01-01.html", "Chapter 1 Getting started", " Chapter 1 Getting started "],
["r-rstudio.html", "1.1 R &amp; RStudio", " 1.1 R &amp; RStudio 1.1.1 Installing R &amp; RStudio IDE 1.1.1.1 Interactively Go to the following link and follow the instructions to install R and the IDE RStudio Interactive Shinyapp Install R &amp; RStudio IDE 1.1.1.2 Manually Video instructions to install RStudio (Download link below) Download https://cloud.r-project.org Video instructions to install RStudio (Download link below) Download https://rstudio.com/products/rstudio/download/ Video instructions to install R packages Installing Packages # install package from CRAN install.packages(&quot;dplyr&quot;) Loading packages # load the package to use in the current R session library(&quot;packagename&quot;) # use a particular function within a package without loading the package packagename::functionname 1.1.2 Running R code (stolen from R4DS) The previous section showed you a couple of examples of running R code. Code in the book looks like this: 1 + 2 ## [1] 3 If you run the same code in your local console, it will look like this: &gt; 1 + 2 [1] 3 There are two main differences. In your console, you type after the &gt;, called the prompt; we don’t show the prompt in the book. In the book, output is commented out with #&gt;; in your console it appears directly after your code. These two differences mean that if you’re working with an electronic version of the book, you can easily copy code out of the book and into the console. Throughout the book we use a consistent set of conventions to refer to code: * Functions are in a code font and followed by parentheses, like sum(), or mean(). * Other R objects (like data or function arguments) are in a code font, without parentheses, like flights or x. If we want to make it clear what package an object comes from, we’ll use the package name followed by two colons, like dplyr::mutate(), or nycflights13::flights. This is also valid R code. 1.1.3 Exercise 1 Identify what working directory you are working out of. Create a folder on your computer titled datascience. Within R, set your working directory to this folder. Solution Identify what working directory you are working out of. getwd() #&gt; [1] &quot;/Users/j.schwarz/NIT/&quot; Create a folder on your computer titled datascience. Within R, set your working directory to this folder. setwd(&quot;/Users/j.schwarz/NIT/datascience&quot;) 1.1.4 Exercise 2 dplyr is an extremely popular package for common data transformation activities and is available from CRAN. Perform the following tasks: Install the dplyr package. Load the dplyr package. Access the help documentation for the dplyr package. Check out the vignette(s) for dplyr Solution Install the tidyverse package. install.packages(&quot;tidyverse&quot;) Load the tidyverse package. library(tidyverse) 1.1.5 Working with RStudio / Setup &amp; Customization Console Script Editor Workspace Environment Misc. Displays "],
["github.html", "1.2 GitHub", " 1.2 GitHub Create a free github account. Website https://github.com/ Download and install github desktop Download https://desktop.github.com "],
["project-setup.html", "Chapter 2 Project Setup ", " Chapter 2 Project Setup "],
["project-structure.html", "2.1 Project structure", " 2.1 Project structure Download business_case_01.zip FIGURE 1.1: Project structure example in RStudio. "],
["installing-packages.html", "2.2 Installing Packages", " 2.2 Installing Packages Download business_case_01.zip "],
["session-02-01.html", "Chapter 3 Functions", " Chapter 3 Functions Here is a review of existing methods. knitr::include_app(&quot;http://jwarz.shinyapps.io/learnR/&quot;, height = &quot;600px&quot;) "],
["session-03-01.html", "Chapter 4 Business case", " Chapter 4 Business case We describe our methods in this chapter. "],
["exercise1.html", "4.1 Exercise1", " 4.1 Exercise1 Find the mean of 1:10. "],
["solution-2.html", "4.2 Solution", " 4.2 Solution Here is how. mean(1:10) ## [1] 5.5 "],
["exercise.html", "4.3 Exercise", " 4.3 Exercise Plot 1:10 in R. 4.3.1 Solution Here is the solution plot(1:10) "],
["session-04-01.html", "Chapter 5 Whateverest", " Chapter 5 Whateverest Here is a review of existing methods. "],
["session-05-01.html", "Chapter 6 Wayne train", " Chapter 6 Wayne train Here is a review of existing methods. "],
["references.html", "References", " References "]
]
